import numpy as np
import matplotlib.pyplot as plt
import mors

'''
Потери атмосферы с учетом изменения светимости Солнца
'''

from dataclasses import dataclass
import константы as к

@dataclass
class ОрбитаПланеты:
    масса_солнц: float     
    частота_вращения: float
    большая_полуось_ае: float
    эксцентриситет: float
    масса_планеты_кг: float
    радиус_планеты_м: float
    коэфф_эффективности: float
    эффективный_радиус_поглощения_XUV_м: float

    def __post_init__(о):
        о.большая_полуось_см = о.большая_полуось_ае * к.au2cm
        о.большая_полуось_м = о.большая_полуось_ае * к.au2m
        о.звезда = mors.Star(Mstar=о.масса_солнц, Omega=о.частота_вращения)  # Загружаем данные из MORS
        о.возраст_звезды     = о.звезда.Tracks['Age']
        о.светимость_звезды_эрг_в_сек  = о.звезда.Tracks['Lx'] + о.звезда.Tracks['Leuv']
        о.освещенность_планеты_эрг_в_сек_на_см2 = о.светимость_звезды_эрг_в_сек/(4*np.pi*(о.большая_полуось_см)**2)
        о.освещенность_планеты_ватт_в_сек_на_м2 = о.освещенность_планеты_эрг_в_сек_на_см2 * к.ergcm2stoWm2
        ...

Земля = ОрбитаПланеты(
    масса_солнц = 1.0,     
    частота_вращения = 1.0,
    большая_полуось_ае = 1,
    эксцентриситет = к.e_earth,
    масса_планеты_кг = к.Me,
    радиус_планеты_м = к.Re,
    коэфф_эффективности = 0.15,
    эффективный_радиус_поглощения_XUV_м = к.Re  # Плюс-минус стратосфера роли не играет, хотя можно учесть
)

def ПотеряМассыОтЭнергии(о):
    '''
    На приливы забиваем в первом приближении

    Формулы и модель берем из  
    - https://ar5iv.labs.arxiv.org/html/1205.0010 (Equation 2,3,4)
    - https://arxiv.org/pdf/1706.02050  (Equation 1)
    '''
    
    # Приливной коэффициент «вытягивания атмосферы, но он зависит от соотношения масс звезды-планеты
    # Пока пренебрегаем, муторный вывод и технически «на порядок не влияет».
    K_tide = 1
    R_3 = о.радиус_планеты_м * о.эффективный_радиус_поглощения_XUV_м**2
    потери = (о.коэфф_эффективности * np.pi * R_3 * о.освещенность_планеты_ватт_в_сек_на_м2) / (к.G * о.масса_планеты_кг * K_tide)
    return потери


потери = ПотеряМассыОтЭнергии(Земля) 


def визуализация(о):
    fig, ax1 = plt.subplots(figsize=(10, 8))
    ax1.loglog(о.возраст_звезды, потери, '-', color='orange', label='Земля')
    ax1.set_xlabel('Время [млн.лет]', fontsize=15)
    ax1.set_ylabel(r'Скорость потери массы [$\frac{кг}{с}$]', fontsize=15)
    ax1.set_title('Потеря земной атмосферы', fontsize=15)
    ax1.grid(alpha=0.4)
    ax1.legend()
    ax1.set_yscale('log')
    ax2 = ax1.twinx()
    ylims = ax1.get_ylim()
    ax2.set_ylim((ylims[0]/ к.s2yr) / к.Me,(ylims[1] / к.s2yr) / к.Me)
    ax2.set_yscale('log')
    ax2.set_ylabel(r'Скорость потери относительно массы [$M_{\oplus}$ $год^{-1}$]', fontsize=15)
    plt.savefig('output/потеря_атмосфер_планетами_по_времени_модель_гамма.pdf', dpi=180)

визуализация(Земля)